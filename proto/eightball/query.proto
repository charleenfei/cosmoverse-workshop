syntax = "proto3";
package charleenfei.icqics20cosmoverseworkshop.eightball;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "eightball/params.proto";
import "eightball/fortunes.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/charleenfei/icq-ics20-cosmoverse-workshop/x/eightball/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/charleenfei/icq-ics20-cosmoverse-workshop/eightball/params";
  }
  // Queries a Fortunes by index.
	rpc Fortunes(QueryGetFortunesRequest) returns (QueryGetFortunesResponse) {
		option (google.api.http).get = "/charleenfei/icq-ics20-cosmoverse-workshop/eightball/fortunes/{owner}";
	}

	// Queries a list of Fortunes items.
	rpc FortunesAll(QueryAllFortunesRequest) returns (QueryAllFortunesResponse) {
		option (google.api.http).get = "/charleenfei/icq-ics20-cosmoverse-workshop/eightball/fortunes";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetFortunesRequest {
	  string owner = 1;

}

message QueryGetFortunesResponse {
	Fortunes fortunes = 1 [(gogoproto.nullable) = false];
}

message QueryAllFortunesRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllFortunesResponse {
	repeated Fortunes fortunes = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
